--[[
Arms:
https://www.roblox.com/catalog/12344591101/Extra-Right-hand-moving-Blocky-white
https://www.roblox.com/catalog/12344545199/Extra-Left-hand-moving-Blocky-white

Legs:
https://www.roblox.com/catalog/11159410305/Rectangle-Head-For-Headless
https://www.roblox.com/catalog/11263254795/Dummy-Head-Rectangle-Head-Grey-For-Headless

Torso:
https://www.roblox.com/catalog/12483700909/Black-Puffer-Vest-1-0-Closed
]]-- 

game.TestService.IsSleepAllowed = false
for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do
	if v:IsA("BasePart") then 
		game:GetService("RunService").Heartbeat:connect(function()
			v.Velocity = Vector3.new(-40,0,-10)
			pcall(function()
				v.CanCollide = false
			end)
			pcall(function()
				v.CanQuery = false
			end)
		end)
	end
end

Bypass = "death"
loadstring(game:GetObjects("rbxassetid://5325226148")[1].Source)()


plr = game.Players.LocalPlayer 
char = Workspace.non

 
for i,v in pairs(char:GetChildren()) do -- gets all ur characters children
if v:IsA("Accessory") and v.Name == "Puffer Vest" then -- dex name for the hat 
v.Name = "Puffer Vest" -- name it whatever you want
end
end
char["Puffer Vest"].Handle.AccessoryWeld:Destroy() -- destroys the accessoryweld
att0 = Instance.new("Attachment",char["Puffer Vest"].Handle) -- creates a attachment into the hat
att0.Orientation = Vector3.new(0, 0, 0) -- rotation
att0.Position = Vector3.new(0, 0, 0) -- position
att1 = Instance.new("Attachment",char["Torso"]) -- what body part that the hat should be attached to (to make it work with r15 go down
ap = Instance.new("AlignPosition",char["Puffer Vest"].Handle) -- align position
ap.Attachment0 = att0
ap.Attachment1 = att1
ap.RigidityEnabled = true -- if its false it will make the hat be wobbly
ao = Instance.new("AlignOrientation",char["Puffer Vest"].Handle) -- align rotation
ao.Attachment0 = att0
ao.Attachment1 = att1
ao.RigidityEnabled = true -- if its false it will make the hat be wobbly




char["Extra Left hand (Blocky)_white"].Handle.AccessoryWeld:Destroy() -- destroys the accessoryweld
att0 = Instance.new("Attachment",char["Extra Left hand (Blocky)_white"].Handle) -- creates a attachment into the hat
att0.Orientation = Vector3.new(110, -0, 0) -- rotation
att0.Position = Vector3.new(0, -0, -0) -- position
att1 = Instance.new("Attachment",char["Left Arm"]) -- what body part that the hat should be attached to (to make it work with r15 go down
ap = Instance.new("AlignPosition",char["Extra Left hand (Blocky)_white"].Handle) -- align position
ap.Attachment0 = att0
ap.Attachment1 = att1
ap.RigidityEnabled = true -- if its false it will make the hat be wobbly
ao = Instance.new("AlignOrientation",char["Extra Left hand (Blocky)_white"].Handle) -- align rotation
ao.Attachment0 = att0
ao.Attachment1 = att1
ao.RigidityEnabled = true -- if its false it will make the hat be wobbly

 
for i,v in pairs(char:GetChildren()) do -- gets all ur characters children
if v:IsA("Accessory") and v.Name == "Extra Right hand (Blocky)_whiter" then -- dex name for the hat 
v.Name = "Extra Right hand (Blocky)_white" -- name it whatever you want
end
end
char["Extra Right hand (Blocky)_white"].Handle.AccessoryWeld:Destroy() -- destroys the accessoryweld
att0 = Instance.new("Attachment",char["Extra Right hand (Blocky)_white"].Handle) -- creates a attachment into the hat
att0.Orientation = Vector3.new(100, 0, 0) -- rotation
att0.Position = Vector3.new(0, -0, -0) -- position
att1 = Instance.new("Attachment",char["Right Arm"]) -- what body part that the hat should be attached to (to make it work with r15 go down
ap = Instance.new("AlignPosition",char["Extra Right hand (Blocky)_white"].Handle) -- align position
ap.Attachment0 = att0
ap.Attachment1 = att1
ap.RigidityEnabled = true -- if its false it will make the hat be wobbly
ao = Instance.new("AlignOrientation",char["Extra Right hand (Blocky)_white"].Handle) -- align rotation
ao.Attachment0 = att0
ao.Attachment1 = att1
ao.RigidityEnabled = true -- if its false it will make the hat be wobbly
 
  
for i,v in pairs(char:GetChildren()) do -- gets all ur characters children
if v:IsA("Accessory") and v.Name == "Unloaded head" then -- dex name for the hat 
v.Name = "Unloaded head" -- name it whatever you want
end
end
char["Unloaded head"].Handle.AccessoryWeld:Destroy() -- destroys the accessoryweld
att0 = Instance.new("Attachment",char["Unloaded head"].Handle) -- creates a attachment into the hat
att0.Orientation = Vector3.new(0, 0, 90)-- rotation
att0.Position = Vector3.new(0, 0, 0) -- position
att1 = Instance.new("Attachment",char["Right Leg"]) -- what body part that the hat should be attached to (to make it work with r15 go down
ap = Instance.new("AlignPosition",char["Unloaded head"].Handle) -- align position
ap.Attachment0 = att0
ap.Attachment1 = att1
ap.RigidityEnabled = true -- if its false it will make the hat be wobbly
ao = Instance.new("AlignOrientation",char["Unloaded head"].Handle) -- align rotation
ao.Attachment0 = att0
ao.Attachment1 = att1
ao.RigidityEnabled = true -- if its false it will make the hat be wobbly
 
   
for i,v in pairs(char:GetChildren()) do -- gets all ur characters children
if v:IsA("Accessory") and v.Name == "MeshPartAccessory" then -- dex name for the hat 
v.Name = "MeshPartAccessory" -- name it whatever you want
end
end
char["MeshPartAccessory"].Handle.AccessoryWeld:Destroy() -- destroys the accessoryweld
att0 = Instance.new("Attachment",char["MeshPartAccessory"].Handle) -- creates a attachment into the hat
att0.Orientation = Vector3.new(0, 0, 90)-- rotation
att0.Position = Vector3.new(-0, 0, 0)  -- position
att1 = Instance.new("Attachment",char["Left Leg"]) -- what body part that the hat should be attached to (to make it work with r15 go down
ap = Instance.new("AlignPosition",char["MeshPartAccessory"].Handle) -- align position
ap.Attachment0 = att0
ap.Attachment1 = att1
ap.RigidityEnabled = true -- if its false it will make the hat be wobbly
ao = Instance.new("AlignOrientation",char["MeshPartAccessory"].Handle) -- align rotation
ao.Attachment0 = att0
ao.Attachment1 = att1
ao.RigidityEnabled = true -- if its false it will make the hat be wobbly

for i,v in next, char:GetDescendants() do
	if v:IsA("BasePart") then 
		game:GetService("RunService").Heartbeat:connect(function()
			pcall(function()
				v.CanCollide = false
			end)
			pcall(function()
				v.CanQuery = false
			end)
		end)
	end
end
